{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.1",
  "parameters": {
    
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "vmNamePrefix": {
      "type": "string",
      "metadata": {
         "description": "VM Name prefix"
      }
    },
    "numberOfInstances": {
      "type": "int",
      "metadata": {
         "description": "Number of VMs to deploy"
      }
    },
    "vnetResourceGroup": {
      "type": "string",
      "metadata": {
         "description": "Resource group where existing VNET exists."
      }
    },
    "vnetName": {
      "type": "string",
      "metadata": {
         "description": "Name of existing VNET where the VMs will be deployed."
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
         "description": "Name of the subnet in the existing VNET where the VMs will be deployed."
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
         "description": "Name of the storage account where the VMs will be deployed."
      }
    },
    "windowsOSVersion": {
      "type": "string",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter, Windows-Server-Technical-Preview."
      },
      "defaultValue": "2012-R2-Datacenter"
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "imagePublisher": "MicrosoftWindowsServer",
    "imageOffer": "WindowsServer",
    "storageAccountType": "Standard_LRS",
    "publicIPAddressType": "Dynamic",
    "vmSize": "Standard_DS1",
    "vnetID": "[resourceId(parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('subnetName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccountName')]",
      "apiVersion": "2015-06-15",
      "location": "[variables('location')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('vmNamePrefix'),'-',copyIndex(1),'-PublicIP')]",
      "location": "[variables('location')]",
      "copy": {
        "name":"publicIPAddressCopy",
        "count":"[parameters('numberOfInstances')]"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('vmNamePrefix'),'-',copyIndex(1))]"
        }
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('vmNamePrefix'),'-',copyIndex(1),'-NIC')]",
      "location": "[variables('location')]",
      "copy": {
        "name": "nicCopy",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('vmNamePrefix'),'-',copyIndex(1),'-PublicIP')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses/',concat(parameters('vmNamePrefix'),'-',copyIndex(1),'-PublicIP'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('vmNamePrefix'),'-',copyIndex(1))]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmCopy",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/',parameters('vmNamePrefix'),'-',copyIndex(1),'-NIC')]",
        "[concat('Microsoft.Network/publicIPAddresses/',parameters('vmNamePrefix'),'-',copyIndex(1),'-PublicIP')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('vmNamePrefix'),'-',copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('windowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('vmNamePrefix'),'-',copyIndex(1),'-osDisk')]",
            "vhd": {
              "uri": "[concat('http://',parameters('storageAccountName'),'.blob.core.windows.net/vhds/',parameters('vmNamePrefix'),'-',copyIndex(1),'-osDisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            { 
              "name":"[concat(parameters('vmNamePrefix'),'-',copyIndex(1),'-networkProfile')]",
              "id": "[resourceId('Microsoft.Network/networkInterfaces/',concat(parameters('vmNamePrefix'),'-',copyIndex(1),'-NIC'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
             "enabled": "true",
             "storageUri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net')]"
          }
        }
      }
    }
      ]
}